// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UsersStatus {
  PENDING
  ACTIVE
  BANNED
}

model Email_verification {
  id          String   @id @default(uuid())
  userId      String
  user        Users    @relation(fields: [userId], references: [id])
  email       String   @unique
  secret      String
  otpVerified Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Users {
  id                 String               @id @default(uuid())
  username           String
  email              String               @unique
  password           String
  roleId             String
  image              String               @default("image.png")
  telegram           String?              @unique
  facebook           String?              @unique
  instagram          String?              @unique
  role               Role                 @relation(fields: [roleId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  was_online         DateTime             @default(now())
  yandex_metrika     Json?
  status             UsersStatus          @default(PENDING)
  Ban                Ban[]
  Activation         Activation[]
  Reset_Password     Reset_Password[]
  UserRole           UserRole[]
  Sessions           Sessions[]
  Projects           Projects[]
  email_verification Email_verification[]
  RequestLog         RequestLog[]
  clientChatSessions ChatSession[]        @relation("ClientChatSessions")
  adminChatSessions  ChatSession[]        @relation("AdminChatSessions")
  ChatMessage        ChatMessage[]
  ChatSession        ChatSession[]
}

model Role {
  id       String     @id @default(uuid())
  name     String     @unique
  UserRole UserRole[]
  Users    Users[]
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String
  user   Users  @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])
}

model Ban {
  id         String   @id @default(uuid())
  userId     String
  user       Users    @relation(fields: [userId], references: [id])
  ban_reason String
  ban_start  DateTime @default(now())
  ban_end    DateTime? @default(now()) @updatedAt
}

model Activation {
  id                String      @id @default(uuid())
  userId            String
  activation_status UsersStatus
  user              Users       @relation(fields: [userId], references: [id])
  createdAt         DateTime    @default(now())
}

model Reset_Password {
  id          String   @id @default(uuid())
  userId      String
  email       String   @unique
  secret      String
  otpVerified Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  user        Users    @relation(fields: [userId], references: [id])
}

model Sessions {
  id         String    @id @default(uuid())
  ip         String
  location   String?
  info       String
  date       DateTime  @default(now())
  endDate    DateTime?
  userId     String
  user       Users     @relation(fields: [userId], references: [id])
  deviceType String
  browser    String
  createdAt  DateTime  @default(now())
}

model ChatSession {
  id        String        @id @default(uuid())
  clientId  String
  client    Users         @relation("ClientChatSessions", fields: [clientId], references: [id])
  adminId   String?
  admin     Users?        @relation("AdminChatSessions", fields: [adminId], references: [id])
  status    ChatStatus    @default(OPEN)
  messages  ChatMessage[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Users     Users?        @relation(fields: [usersId], references: [id])
  usersId   String?
}

enum ChatStatus {
  OPEN
  ACTIVE
  CLOSED
  ARCHIVED
}

model ChatMessage {
  id              String            @id @default(uuid())
  sessionId       String
  session         ChatSession       @relation(fields: [sessionId], references: [id])
  senderId        String
  sender          Users             @relation(fields: [senderId], references: [id])
  content         String
  isRead          Boolean           @default(false)
  createdAt       DateTime          @default(now())
  mediaUrl        String?
  FavoriteMessage FavoriteMessage[]
}

model Projects {
  id          String   @id @default(uuid())
  userId      String
  user        Users    @relation(fields: [userId], references: [id])
  name        String
  description String
  created_at  DateTime
  updated_at  DateTime @default(now()) @updatedAt
  Pages       Pages[]
}

model Pages {
  id              String   @id @default(uuid())
  projectId       String
  projects        Projects @relation(fields: [projectId], references: [id])
  title           String
  slug            String
  status          String
  seo_title       String
  seo_description String
  created_at      DateTime
  updated_at      DateTime @default(now()) @updatedAt
  Blocks          Blocks[]
}

model Blocks {
  id      String @id @default(uuid())
  pageId  String
  page    Pages  @relation(fields: [pageId], references: [id])
  type    String
  content Json
  order   String
}

model Templates {
  id                String              @id @default(uuid())
  name              String
  preview_image     String
  config            String
  Project_Templates Project_Templates[]
}

model Project_Templates {
  id          String    @id @default(uuid())
  templatesId String
  templates   Templates @relation(fields: [templatesId], references: [id])
  used_at     DateTime  @default(now())
}

model Domains {
  id          String @id @default(uuid())
  domain_name String
  verified    String
  dns_config  String
}

model RequestLog {
  id             String   @id @default(uuid())
  userId         String?
  user           Users?   @relation(fields: [userId], references: [id])
  method         String
  url            String
  ip             String
  userAgent      String
  body           Json?
  query          Json?
  responseCode   Int
  responseTimeMs Int
  createdAt      DateTime @default(now())
}

model FavoriteMessage {
  id String @id @default(uuid())

  messageId String
  message   ChatMessage @relation(fields: [messageId], references: [id])
  createdAt DateTime    @default(now())

  @@unique(messageId)
}

model ViewPages {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
}
